/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package co.smilers.campaignservices.api.utils;

import java.util.List;

import co.smilers.campaignservices.model.*;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-26T02:42:42.543Z")

@Api(value = "campaign", description = "the campaign API")
public interface CampaignApi {

    @ApiOperation(value = "Agregar calificaciones", nickname = "addAnswerScore", notes = "Agregar nueva lista de calificaciones", response = ModelApiResponse.class, authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:buttons", description = "read your experience"),
            @AuthorizationScope(scope = "write:buttons", description = "modify experience in your account")
            })
    }, tags={ "campaign", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation", response = ModelApiResponse.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/campaign/answerScore",
        produces = { "application/xml; charset=utf-8", "application/json; charset=utf-8" }, 
        consumes = { "application/json; charset=utf-8", "application/xml; charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> addAnswerScore(@ApiParam(value = "Objecto de resultado que será agregado", required = true) @Valid @RequestBody List<AnswerScore> answerScore);


    @ApiOperation(value = "Nueva campaña", nickname = "addCampaign", notes = "Agregar nueva campaña", response = ModelApiResponse.class, authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:buttons", description = "read your experience"),
            @AuthorizationScope(scope = "write:buttons", description = "modify experience in your account")
            })
    }, tags={ "campaign", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation", response = ModelApiResponse.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/campaign",
        produces = { "application/xml; charset=utf-8", "application/json; charset=utf-8" }, 
        consumes = { "application/json; charset=utf-8", "application/xml; charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> addCampaign(@ApiParam(value = "Objecto Campaña que será agregado", required = true) @Valid @RequestBody Campaign campaign);


    @ApiOperation(value = "Lista las campañas", nickname = "listCampaign", notes = "Lista las campañas", response = Campaign.class, responseContainer = "List", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:buttons", description = "read your experience"),
            @AuthorizationScope(scope = "write:buttons", description = "modify experience in your account")
            })
    }, tags={ "campaign", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Campaign.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "Unauthorized user") })
    @RequestMapping(value = "/campaign",
        produces = { "application/json; charset=utf-8", "application/xml; charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Campaign>> listCampaign(@NotNull @ApiParam(value = "Usuario asociado a la cuenta de la campaña", required = true) @Valid @RequestParam(value = "user", required = true) String user, @ApiParam(value = "Título") @Valid @RequestParam(value = "title", required = false) String title, @ApiParam(value = "Descripción") @Valid @RequestParam(value = "description", required = false) String description, @ApiParam(value = "Fecha de inicio de la campaña yyyy-MM-dd HH:mm:ss") @Valid @RequestParam(value = "startDate", required = false) String startDate, @ApiParam(value = "Fecha fin de la campaña yyyy-MM-dd HH:mm:ss") @Valid @RequestParam(value = "endDate", required = false) String endDate, @ApiParam(value = "Campañas publicadas") @Valid @RequestParam(value = "isPublished", required = false) Boolean isPublished, @ApiParam(value = "Zona") @Valid @RequestParam(value = "zone", required = false) Integer zone);


    @ApiOperation(value = "Lista encabezado general", nickname = "listGeneralHeader", notes = "Lista los encabezados generales", response = GeneralHeader.class, responseContainer = "List", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:buttons", description = "read your experience"),
            @AuthorizationScope(scope = "write:buttons", description = "modify experience in your account")
            })
    }, tags={ "campaign", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GeneralHeader.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "Unauthorized user") })
    @RequestMapping(value = "/campaign/generalHeader",
        produces = { "application/json; charset=utf-8", "application/xml; charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<GeneralHeader>> listGeneralHeader(@NotNull @ApiParam(value = "Usuario asociado a la cuenta de la campaña", required = true) @Valid @RequestParam(value = "user", required = true) String user, @ApiParam(value = "Título") @Valid @RequestParam(value = "title", required = false) String title, @ApiParam(value = "Descripción") @Valid @RequestParam(value = "description", required = false) String description, @ApiParam(value = "Encabezado publicado") @Valid @RequestParam(value = "isPublished", required = false) Boolean isPublished);


    @ApiOperation(value = "Lista encabezado general", nickname = "listGeneralQuestion", notes = "Lista los encabezados generales", response = GeneralQuestionItem.class, responseContainer = "List", authorizations = {
        @Authorization(value = "petstore_auth", scopes = {
            @AuthorizationScope(scope = "read:buttons", description = "read your experience"),
            @AuthorizationScope(scope = "write:buttons", description = "modify experience in your account")
            })
    }, tags={ "campaign", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = GeneralQuestionItem.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "Unauthorized user") })
    @RequestMapping(value = "/campaign/generalQuestion",
        produces = { "application/json; charset=utf-8", "application/xml; charset=utf-8" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<GeneralQuestionItem>> listGeneralQuestion(@NotNull @ApiParam(value = "Usuario asociado a la cuenta", required = true) @Valid @RequestParam(value = "user", required = true) String user, @ApiParam(value = "Título") @Valid @RequestParam(value = "title", required = false) String title, @ApiParam(value = "Descripción") @Valid @RequestParam(value = "description", required = false) String description, @ApiParam(value = "Pregunta publicada") @Valid @RequestParam(value = "isPublished", required = false) Boolean isPublished);

}
