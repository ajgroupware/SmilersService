/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package co.smilers.campaignservices.api;

import co.smilers.campaignservices.model.*;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-07T11:06:30.112Z")

@Api(value = "account", description = "the account API")
public interface AccountApi {

    @ApiOperation(value = "Validar usuario", nickname = "login", notes = "Autenticación del usuario", response = User.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "Unauthorized user"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/account/login",
        produces = { "application/xml; charset=utf-8", "application/json; charset=utf-8" }, 
        consumes = { "application/json; charset=utf-8", "application/xml; charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<User> login(@ApiParam(value = "Objecto Login usuario y contraseña", required = true) @Valid @RequestBody Login login);


    @ApiOperation(value = "Sacar usuario", nickname = "logout", notes = "Sacar usuario", response = ModelApiResponse.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "Unauthorized user"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/account/logout",
        produces = { "application/xml; charset=utf-8", "application/json; charset=utf-8" }, 
        consumes = { "application/json; charset=utf-8", "application/xml; charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> logout(@ApiParam(value = "Objecto Logout usuario y idPush", required = true) @Valid @RequestBody Logout logout);


    @ApiOperation(value = "Registro de dispositivo", nickname = "registerMeterDevice", notes = "Registro de dispositivo", response = ModelApiResponse.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = ModelApiResponse.class),
        @ApiResponse(code = 400, message = "Invalid status value"),
        @ApiResponse(code = 401, message = "Unauthorized user"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/account/registerMeterDevice/{account}",
        produces = { "application/xml; charset=utf-8", "application/json; charset=utf-8" }, 
        consumes = { "application/json; charset=utf-8", "application/xml; charset=utf-8" },
        method = RequestMethod.POST)
    ResponseEntity<ModelApiResponse> registerMeterDevice(@ApiParam(value = "Cuenta activa y asociada a la sede", required = true) @PathVariable("account") String account, @ApiParam(value = "Objecto Dispositivo", required = true) @Valid @RequestBody MeterDevice meterDevice);

}
